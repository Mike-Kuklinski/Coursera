Polyalphabetic Cipher Presentation
========================================================
author: Mike Kuklinski
date: 9/27/2015

There's a lot of **UNTRUSTWORTHY** people out there! 
People that will try and steal information from you when you least expect it! Any chance they get, they will read messages you send to others and use that information to **BLACKMAIL** you!

So what are **YOU** going to do about it?!

ENCRYPT YOUR MESSAGES!
========================================================

What does encryption do???
- Provides **SUPER   SECURE** protection for your most valuable and maybe *embarrassing* information!
- Kicks those untrustworthy people to the curb!
- Impresses your friend(s)!
- No more blackmailing!


How to encrypt????
========================================================

Go to [Super Encryption Secret NOW!](https://mike-kuklinski.shinyapps.io/Polyalphabetic-Encryption) website
- Enter the message you want to send to your business partner (e.g. "Meet me at the lighthouse at midnight to discuss business things")
- Enter your *secret* **key phrase** that only you and your business partner know. (e.g. 'Untrustworthy People Stink')
- **SUMBIT!**
- Get your encrypted message 
(e.g. 'FRXJTDXVOJS EDOPWVSXGFM RJUFSCBVFDUYLGQNOHWGNYRJSJGBB XILRLCWDZZ')
- Send encrypted message to your business partner
- Business partner goes to same awesome website and enters **ENCRYPTED** message, key phrase, and selects **DECRYPT**.
- Original message shows up, **GOOD AS NEW!**

How does it work?
========================================================
**SUPER POWERFUL SECRET CIPHER ALPHABET GENERATOR!** 

```{r echo=FALSE}
suppressMessages(library(dplyr))
key_word <- function(word){
        # Function to create a data.frame where each column is an
        # encrypted alphabet based on a letter in a given key phrase
        alph <-  c(LETTERS, " ")
        key_word_table <- data.frame('orig' = alph)
        key_letters <- strsplit(word, '')[[1]]
        # Loop through key phrase, letter by letter and use helper function,
        # key_alpha to create new alphabet
        for (char in seq_len(nchar(word))){
                key_sub <- key_alpha(key_letters[char])
                key_word_table <- mutate(key_word_table, key_sub)
                temp_names <- names(key_word_table)
                temp_names[char+1] <- as.character(char)
                names(key_word_table) <- temp_names
        }
        key_word_table[,-1]
}


key_alpha <- function(letter){
        # Helper function to create cipher alphabet where the letter 
        # input is the first letter in the cipher alphabet
        alph <-  c(LETTERS, " ")
        key_idx <- match(toupper(letter), alph)
        keybet <- c(alph[key_idx:27], alph[1:key_idx-1])
        keybet
}

encrypt <- function(message, key_phrase){
        # Function to encrypt 
        encrypt_message <- NULL
        # Create data.frame of cipher alphabets for each letter in key phrase
        key <- as.data.frame(key_word(key_phrase))
        modulo <- nchar(key_phrase)
        split_message <- strsplit(message, '')[[1]]
        # Loop through message letters and data.frame of cipher alphabets to 
        # ecrypt each letter
        for (char in seq_len(nchar(message))){
                encrypt_idx <- match(toupper(split_message[char]),  c(LETTERS, " "))
                # Use modulo to cycle through data.frame
                if(char%%modulo == 0){
                        key_idx <- modulo
                }else {key_idx <- char%%modulo}
                encrypt_alpha <- key[encrypt_idx, key_idx]
                encrypt_message <- paste(encrypt_message, encrypt_alpha, sep = "")
        }
        encrypt_message
}



decrypt <- function(encrypt_message, key_phrase){
        # Function to encrypt 
        decrypt_message <- NULL
        # Create data.frame of cipher alphabets for each letter in key phrase
        key <- as.data.frame(key_word(key_phrase))
        modulo <- nchar(key_phrase)
        split_message <- strsplit(encrypt_message, '')[[1]]
        # Loop through message letters and data.frame of cipher alphabets to 
        # ecrypt each letter
        for (char in seq_len(nchar(encrypt_message))){
                # Use modulo to cycle through data.frame
                if(char%%modulo == 0){
                        key_idx <- modulo
                }else {key_idx <- char%%modulo}
                decrypt_idx <- match(toupper(split_message[char]), key[,key_idx])
                decrypt_alpha <- c(LETTERS, " ")[decrypt_idx]
                decrypt_message <- paste(decrypt_message, decrypt_alpha, sep = "")
        }
        decrypt_message
        
}


# Use this code for server
run_program <- function(message, key, fun){
        h <- as.numeric(fun)
        if(h == 0){answer <- encrypt(message, key)}
        else if(h == 1){answer <- decrypt(message, key)}
        else {answer <- '0 to Encrypt; 1 to Decrypt'}
        answer
}

```
run_program('message' , 'key phrase' , '0-Encyrpt 1-Decrypt')
```{r}
run_program('abcdefghijklmnopqrstuvwxyz','a zyxwvutsrqponmlkjihgfedcb',0)
```

TAKE THAT BLACKMAILERS!
========================================================

When an untrustworthy person reads: 

'FHFNEIENFIE' 

instead of the original message: 

'How are you',  

they will think.....
- Whaaaaaaaaaaaaaaaaaaaaa???
- Thats *jibberish*!!
- Am I taking *CRAZY PILLS?!?!*
- My attempts at *blackmailing* have been foiled!!
